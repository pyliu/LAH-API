<?php
require_once(dirname(dirname(__FILE__)).DIRECTORY_SEPARATOR."init.php");
require_once(INC_DIR.DIRECTORY_SEPARATOR."Cache.class.php");
require_once(INC_DIR.DIRECTORY_SEPARATOR."System.class.php");
require_once(ROOT_DIR.'/vendor/autoload.php');
require_once("FileAPICommand.class.php");

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\IOFactory;

class FileAPISurTrackingXlsxExportCommand extends FileAPICommand {

    private function write_export_tmp_file(&$spreadsheet, $filename = 'tmp.xlsx') {
        // also write a copy to export folder
        $writer = new Xlsx($spreadsheet);
        $writer->save(EXPORT_DIR.DIRECTORY_SEPARATOR.$filename);
        //zipExports();
    }

    private function write_php_output(&$spreadsheet, $filename = 'tmp.xlsx') {
        ob_end_clean();
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment;filename="'.$filename.'"');
        header('Cache-Control: max-age=0');
        header ('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT');
        header ('Cache-Control: cache, must-revalidate');
        header ('Pragma: public');
        //ob_end_clean();

        $writer = IOFactory::createWriter($spreadsheet, 'Xlsx');
        $writer->save('php://output');
    }

    private function export(&$spreadsheet, &$params, $title) {
        $spreadsheet->getProperties()
            ->setCreator("地政智慧控管系統")
            ->setLastModifiedBy("地政智慧控管系統")
            ->setTitle("$title 匯出")
            ->setSubject("$title 匯出")
            ->setDescription(
                "document for Office 2007 XLSX, generated by PHPSpreadsheet classes."
            )
            ->setKeywords("office 2007 openxml php xlsx")
            ->setCategory("export");

        $filename = strtoupper($params['site']).'.xlsx';
        Logger::getInstance()->info('寫入 '.$filename);
        $this->write_export_tmp_file($spreadsheet, $filename);
        Logger::getInstance()->info('輸出 RESPONSE STREAM ... ');
        $this->write_php_output($spreadsheet, $filename);
        Logger::getInstance()->info('輸出 RESPONSE STREAM 完成');
    }

    private function style_cell_border(&$worksheet, $from, $to = null) {
        $to = $to ?? $from;
        $worksheet->getStyle($from.':'.$to)->getBorders()->getTop()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);
        $worksheet->getStyle($from.':'.$to)->getBorders()->getBottom()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);
        $worksheet->getStyle($from.':'.$to)->getBorders()->getLeft()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);
        $worksheet->getStyle($from.':'.$to)->getBorders()->getRight()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);
    }

    private function style_row_border(&$worksheet, $row_num) {
        foreach (range('A', 'I') as $column){
            $this->style_cell_border($worksheet, $column.$row_num);
        }
    }

    private function write_sur_tracking_xlsx(&$params, $title) {
        $count = count($params['rows']);
        Logger::getInstance()->info('查到 '.$count.' 筆資料');
        // construct tpl path
        $tpl = ROOT_DIR.DIRECTORY_SEPARATOR.'assets'.DIRECTORY_SEPARATOR.'xlsx'.DIRECTORY_SEPARATOR.'sur_tracking.tpl.xlsx';
        Logger::getInstance()->info('讀取 '.$tpl.' 樣板XLSX');
        $spreadsheet = IOFactory::load($tpl);
        $worksheet = $spreadsheet->getActiveSheet();
        // set office name
        $site = $params['site'];
        switch ($params['site']) {
            case 'HA': $site = '桃園'; break;
            case 'HB': $site = '中壢'; break;
            case 'HC': $site = '大溪'; break;
            case 'HD': $site = '楊梅'; break;
            case 'HE': $site = '蘆竹'; break;
            case 'HF': $site = '八德'; break;
            case 'HG': $site = '平鎮'; break;
            case 'HH': $site = '龜山'; break;
        }
        $worksheet->setCellValueExplicit(
            'A1',
            '桃園市'.$site.'地政事務所',
            \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
        );
        if (!empty($params['header'])) {
            $worksheet->setCellValueExplicit(
                'A2',
                $params['header'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
        }
        $worksheet->getStyle('A'.($count+4).':I'.($count+4))->getAlignment()->setWrapText(true);
        /** json data example
         * 收件字號: '114-HA52-007600',
         * 收件時間: '114-03-12 11:18:23',
         * 複丈原因: '鑑界',
         * 辦理情形: '展期',
         * 測量員: '江ＯＯ',
         * 延期複丈原因: '',
         * 複丈時間: '114-08-04 09:00:00',
         * 逾期時間: '114-08-01 11:18:23',
         * 承辦人簽章: ''
         */
        $row_num = 0;
        foreach( $params['rows'] as $index => $row ) {
            $row_num = $index + 4;  // template has the header and title row, so add 4
            $worksheet->setCellValueExplicit(
                'A'.$row_num,
                $row['收件字號'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
            $worksheet->setCellValueExplicit(
                'B'.$row_num,
                $row['收件時間'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
            $worksheet->setCellValueExplicit(
                'C'.$row_num,
                $row['複丈原因'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );

            // $worksheet->mergeCells('D'.$row_num.':'.'E'.$row_num);
            $worksheet->setCellValueExplicit(
                'D'.$row_num,
                $row['辦理情形'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
            $worksheet->setCellValueExplicit(
                'E'.$row_num,
                $row['測量員'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
            $worksheet->setCellValueExplicit(
                'F'.$row_num,
                $row['延期複丈原因'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
            $worksheet->setCellValueExplicit(
                'G'.$row_num,
                $row['複丈時間'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
            $worksheet->setCellValueExplicit(
                'H'.$row_num,
                $row['逾期時間'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
            $worksheet->setCellValueExplicit(
                'I'.$row_num,
                $row['承辦人簽章'],
                \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
            );
            $this->style_row_border($worksheet, $row_num);
            // row auto height
            $worksheet->getRowDimension($row_num)->setRowHeight(-1);
        }
        // write last signature row
        $row_num += 1;
        $worksheet->mergeCells('A'.$row_num.':'.'I'.$row_num);
        $worksheet->setCellValueExplicit(
            'A'.$row_num,
            '填表人                        '.
            '課長                          '.
            '秘書                          '.
            '主任                          ',
            \PhpOffice\PhpSpreadsheet\Cell\DataType::TYPE_STRING
        );
        $worksheet->getRowDimension($row_num)->setRowHeight(30);
        $worksheet->getStyle('A'.$row_num)
            ->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER);
        $worksheet->getStyle('A'.$row_num)
            ->getAlignment()->setVertical(\PhpOffice\PhpSpreadsheet\Style\Alignment::VERTICAL_CENTER);

        $this->export($spreadsheet, $params, $title);
    }

    function __construct() {
        // https://phpspreadsheet.readthedocs.io/en/latest/topics/recipes/#write-a-newline-character-n-in-a-cell-altenter
        // AdvancedValuebinder.php automatically turns on "wrap text" for the cell when it sees a newline character in a string that you are inserting in a cell. Just like Microsoft Office Excel.
        \PhpOffice\PhpSpreadsheet\Cell\Cell::setValueBinder( new \PhpOffice\PhpSpreadsheet\Cell\AdvancedValueBinder() );
    }

    function __destruct() {}

    public function execute() {
        // title
        $title = '測量案件管制清冊';
        Logger::getInstance()->info($title);
        // Logger::getInstance()->info(print_r($_POST, true));
        $params = array(
            "rows" => $_POST['jsons'],
            "site" => $_POST['site'],
            "header" => $_POST['header']
        );
        // execute command here
        $this->write_sur_tracking_xlsx($params, $title);
    }
}
